parameters:
  - name: "buildVersion"
    default: ""
    type: string
  - name: "publishEnabled"
    default: "false"
    type: string
  - name: "publishFeed"
    default: ""
    type: string
  - name: "publishContainer"
    default: ""
    type: string

jobs:
  - job: "BuildAddon"
    displayName: "Build Addon"
    workspace:
      clean: all
    pool:
      name: Evergine
      demands:
        - msbuild
        - pscore
    variables:
      nugetOutputPath: "$(Build.StagingDirectory)/nupkgs"
      wepkgOutputPath: "$(Build.StagingDirectory)/wepkgs"
      NetCoreSDKVersion: "6.x"
      NuGetVersion: "6.x"

    steps:
      - task: PowerShell@2
        displayName: "Install and checkout lfs manually"
        inputs:
          pwsh: true
          targetType: inline
          script: |
            git lfs install
            git lfs pull
          errorActionPreference: continue
          failOnStderr: false
          ignoreLASTEXITCODE: true
      - task: UseDotNet@2
        displayName: "Check .NETCore SDK"
        inputs:
          version: "$(NetCoreSDKVersion)"

      - task: NuGetToolInstaller@1
        displayName: "Check NuGet client"
        inputs:
          versionSpec: "$(NuGetVersion)"
          checkLatest: true

      - task: PowerShell@2
        displayName: "Generate NuGet packages"
        inputs:
          filePath: "./Generate-NuGets.ps1"
          arguments: "-Version ${{ parameters.buildVersion }} -outputfolder $(nugetOutputPath)"

      - task: PowerShell@2
        displayName: "Generate Assets package"
        inputs:
          filePath: "./Generate-Assets-Package.ps1"
          arguments: "-Version ${{ parameters.buildVersion }} -outputfolder $(wepkgOutputPath)"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: NuGets"
        inputs:
          PathtoPublish: "$(nugetOutputPath)"
          ArtifactName: "NuGets"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: Wepkgs"
        inputs:
          PathtoPublish: "$(wepkgOutputPath)"
          ArtifactName: Wepkgs

      - task: NuGetCommand@2
        displayName: "Push NuGets to feed"
        enabled: ${{ parameters.publishEnabled }}
        condition: and(succeeded(), ne('${{ parameters.publishFeed }}', ''))
        inputs:
          command: "push"
          packagesToPush: "$(nugetOutputPath)/*.nupkg;!$(nugetOutputPath)/*.symbols.nupkg"
          nuGetFeedType: "external"
          publishFeedCredentials: ${{ parameters.publishFeed }}

      - task: AzureFileCopy@5
        displayName: "Upload to Azure BLOB packages"
        enabled: ${{ parameters.publishEnabled }}
        condition: and(succeeded(), ne('${{ parameters.publishContainer }}', ''))
        inputs:
          SourcePath: "$(wepkgOutputPath)/Evergine.MRTK.${{ parameters.buildVersion }}.wepkg"
          azureSubscription: "Waveengineteam devops connections SP"
          Destination: AzureBlob
          storage: everginestudio
          ContainerName: "pkg-${{ parameters.publishContainer }}"

      - task: PowerShell@2
        displayName: "Clean up"
        condition: succeededOrFailed()
        inputs:
          pwsh: true
          targetType: inline
          script: |
            cd $PSScriptRoot  # important as we cannot delete from same folder

            if ($Env:Build_SourcesDirectory -and (Test-Path -Path $Env:Build_SourcesDirectory)){
                Write-Host "Deleting $Env:Build_SourcesDirectory"
                Get-ChildItem -Path $Env:Build_SourcesDirectory -Recurse -Force | Remove-Item -Recurse -Force
            }

            if ($Env:Build_ArtifactStagingDirectory -and (Test-Path -Path $Env:Build_ArtifactStagingDirectory)){
                Write-Host "Deleting $Env:Build_ArtifactStagingDirectory"
                Remove-Item -Path $Env:Build_ArtifactStagingDirectory -Recurse -Force
            }

            if ($Env:Common_TestResultsDirectory -and (Test-Path -Path $Env:Common_TestResultsDirectory)){
                Write-Host "Deleting $Env:Common_TestResultsDirectory"
                Remove-Item -Path $Env:Common_TestResultsDirectory -Recurse -Force
            }

            if ($Env:Build_BinariesDirectory -and (Test-Path -Path $Env:Build_BinariesDirectory)){
                Write-Host "Deleting $Env:Build_BinariesDirectory"
                Remove-Item -Path $Env:Build_BinariesDirectory -Recurse -Force
            }
          errorActionPreference: continue
          failOnStderr: false
          ignoreLASTEXITCODE: true # some root folders cannot be deleted as they are in use, but we can live with that
